h1. Flamingo

An elegant way to wade and filter the Twitter message stream.

h2. Overview

Flamingo uses EventMachine to efficiently route and process stream and dispatch events.

h3. wader

The wader process starts the stream and dispatches stream responses as they arrive.

h3. dispatcher workers

Flamingo's dispatcher workers act on stream responses.

h3. server

Flamingo server creates and manages stream requests using a lightweight Sinatra responder.

h3. flamingod

The Flamingod is the main overseer of the Flamingo flock.

Starts three sets of children:

* A wader process: initiates stream request, pushes each response into the queue
* A Sinatra server: lightweight responder to create and manage subscriptions
* A set of dispatchers: worker processes that handle each stream response.

You can control the flamingod with the following signals:

* TERM and INT will kill the flamingod parent process, and signal each child with TERM
* USR1 will restart the wader gracefully.



h2. Dependencies

* redis
* redis-namespace
* twitter
* resque
* sinatra
* active_support
* twitter-stream

<pre>
  sudo gem install twitter-stream resque sinatra active_support twitter redis redis-namespace
</pre>


h2. Configuration

* Link (or mkdir) flamingo/log

* in @flamingo/config/flamingo.yml@, set your screen_name, password, and the stream type


h2. Flamingo

Here is a photo of a flamingo:

!http://farm4.static.flickr.com/3438/3302580937_0ec540b73e_z_d.jpg!

Flamingo Photo by "William Warby, CC-BY License":http://www.flickr.com/photos/wwarby/3302580937 :: photo taken 21 Feb 2009 in Dagnall, England.
